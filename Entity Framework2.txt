Entity Framework
Entity framework Core es una librería creada por Microsoft que nos permite acceder a las bases de datos, principalmente relacionales, de una forma muy simple. 
La gran ventaja de Entity Framework Core es que es muy simple y amigable, ya que nos permite utilizar código en vez de SQL directamente. Además es compatible con la librería LINQ,aunque cuidado con hacer cosas locas con LINQ que es donde vemos reflejados los posibles problemas de rendimiento.

Diferencia entre Entity Framework y entity framework core
la diferencia entre Entity Framework y entity framework core es simplemente que Entity framework está ligada a .NET Framework, mientras que Entity Framework core está ligada a .NET o .NET core, además de está última ser más ligera, y recibir las actualizaciones más recientes.


Qué es code First?
Code first es el proceso en el que el desarrollador escribe las clases que van a ser utilizadas como entidades y entity framework se encarga de crear las tablas en base a esas clases.

Qué es Database First?
Database First es el proceso en el que la base de datos se crea de forma manual (a través de SQL) o ya existe anteriormente y es Entity Framework el que se encarga de generar las entidades basándose en dicha base de datos.

Qué es Model first?
Alternativamente con Entity framework y visual estudio podemos utilizar el proceso model first, que es ir al diseñador de visual studio y crear las entidades, así como sus relaciones en dicho diseñador.


Qué es el DBContext?
DbContext es una clase en Entity Framework Core que se utiliza para interactuar con una base de datos. Es la clase principal de trabajo que se utiliza para realizar operaciones CRUD (Crear, Leer, Actualizar y Eliminar) en la base de datos.
DbContext es una clase abstracta que se puede heredar para crear una clase concreta que represente el contexto de la base de datos de nuestra aplicación. Esta clase concreta se utiliza para configurar la conexión a la base de datos, definir las entidades que se almacenarán en la base de datos y aplicar cambios en la base de datos.

Qué es DbSet?
DbSet es una clase en Entity Framework Core que representa un conjunto de entidades en la base de datos. Como DbSet<Userid> o DbSet<Working experience>.
Cada propiedad DbSet en una clase DbContext representa una tabla en la base de datos. Ejemplos: public DbSet<Userid> Userids { get; set; } public DbSet<Wokringexperience> Wokringexperiences { get; set; }


Conclusión
DbContext es una clase esencial en Entity Framework Core que proporciona una capa de abstracción sobre la base de datos y le permite interactuar con ella de manera fácil y eficiente en su aplicación.
DbSet es una clase en Entity Framework Core que se utiliza para definir un conjunto de entidades de la base de datos y realizar operaciones CRUD sobre ellas dentro de la aplicación.


Qué son las migraciones en Entity framework Core?
Las migraciones o migrations en Entity Framework core son la forma de mantener la estructura del modelo que estás utilizando en tu aplicación sincronizada con la base de datos. En otras palabras, te permiten ir actualizando tu código y que la base de datos se vaya actualizando acordemente. 

Y esto Entity Framework lo permite hacer de una forma muy sencilla. 
Ahora lo que vamos a hacer es generar las migraciones, para ello tenemos dos opciones.

A -  Desde la línea de comandos, nos ubicamos en la carpeta que contiene el csproj del proyecto que contiene el DbContext y ejecutamos el siguiente  código:

dotnet ef migrations add MigracionInicial
 
B - en la consola de nuget (package manager console) ejecutamos el siguiente comando:

add-migration MigracionInicial


using (var scope = app.Services.CreateScope())
{
    CursoEfContext context = scope.ServiceProvider.GetRequiredService<CursoEfContext>();
    context.Database.Migrate();
}

Lo que tendríamos que hacer es eliminarla con el comando dotnet ef migrations remove, este comando elimina la última migración y pone el snapshot a como estaba anteriormente

utilizamos ICollection porque nos da algo mas de versatilidad comparado con IEnumerable, como puede ser añadir elementos, borrarlos o actualizarlo, si no vamos a utilizar ninguna de estas características podemos utilizar IEnumerable, IList es otra muy buena alternativa, pero como siempre depende de tu caso de uso. 

 
LINQ
Obtención de un único elemento con LINQ
Para obtener un único elemento tenemos varias opciones, TODAS ellas, reciben como parámetro el delegado Func<T, bool> (igual que el where) y devuelven un elemento del tipo T. 

.First() -> devvuelve el primer elemento
.FristOrDefault() - > devuelve el primer elemento o uno por defecto. 
.Single() -> si hay más de un elemento o no hay ninguno, devuelve una excepción, si hay un elemento lo devuelve.
.SingleOrDefault() -> en caso de haber más de un elemento salta una excepción y si hay solo uno o ningún devuelve el elemento o uno por defecto. 
Podría hacer un post entero, quizá lo haga, sobre que utilizar si .Single, o .First, la respuesta es que ninguno, ya que .First puede devolver falsos positivos si hay más de un elemento y .Single necesita leer toda la enumeración para comprobar que no hay ninguno más. 

Depende un poco del escenario, pero para obtener elementos únicos que no sabemos a ciencia cierta que son un ID único en la base de datos recomiendo una combinación entre .Count == 1 y .First. haciendo que si count no es 1 salte una excepción. 

Último elemento con LINQ
SImilar al anterior. 

.Last() -> devuelve el último elemento.
.LastOrDefault() -> devuelve el último elemento o uno por defecto (vacío).



 Ordenar elementos en LINQ
Para ordenar elementos debemos llamar al método .OrderBy u .OrderByDescending el cual ordenará de forma descendente. 

Ambos métodos contienen un método adicional en el que puedes indicar un objeto del tipo IComparer para poder ordenar a tu gusto.

El resultado que obtendremos es la propia lista ordenada como hemos indicado:

var librosOrdenados = arrayLibros.Where(a => a.Autor == "Santiago Posteguillo").OrderBy(a=>a.Titulo);


Agrupar elementos en LINQ
Para agrupar elementos debemos utilizar el método .GroupBy() y el resultado será una lista IEnumerable<Grouping<Key, T>> en nuestro caso, agrupamos por autor, y podemos iterar sobre la lista, accediendo al grupo, key contiene el nombre del autor del libro. 

var agrupacion = arrayLibros.GroupBy(a => a.Autor);

foreach(var autorLibro in agrupacion)
{
    Console.WriteLine(autorLibro.Key);

    foreach(var libro in autorLibro)
    {
        Console.WriteLine(libro.Titulo);
    }
}